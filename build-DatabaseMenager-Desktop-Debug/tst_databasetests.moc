/****************************************************************************
** Meta object code from reading C++ file 'tst_databasetests.cpp'
**
** Created by: The Qt Meta Object Compiler version 68 (Qt 6.4.2)
**
** WARNING! All changes made in this file will be lost!
*****************************************************************************/

#include <memory>
#include <QtCore/qmetatype.h>
#if !defined(Q_MOC_OUTPUT_REVISION)
#error "The header file 'tst_databasetests.cpp' doesn't include <QObject>."
#elif Q_MOC_OUTPUT_REVISION != 68
#error "This file was generated using the moc from 6.4.2. It"
#error "cannot be used with the include files from this version of Qt."
#error "(The moc has changed too much.)"
#endif

#ifndef Q_CONSTINIT
#define Q_CONSTINIT
#endif

QT_BEGIN_MOC_NAMESPACE
QT_WARNING_PUSH
QT_WARNING_DISABLE_DEPRECATED
namespace {
struct qt_meta_stringdata_DatabaseTests_t {
    uint offsetsAndSizes[40];
    char stringdata0[14];
    char stringdata1[17];
    char stringdata2[1];
    char stringdata3[15];
    char stringdata4[13];
    char stringdata5[17];
    char stringdata6[16];
    char stringdata7[12];
    char stringdata8[12];
    char stringdata9[8];
    char stringdata10[12];
    char stringdata11[11];
    char stringdata12[18];
    char stringdata13[24];
    char stringdata14[19];
    char stringdata15[18];
    char stringdata16[33];
    char stringdata17[25];
    char stringdata18[18];
    char stringdata19[13];
};
#define QT_MOC_LITERAL(ofs, len) \
    uint(sizeof(qt_meta_stringdata_DatabaseTests_t::offsetsAndSizes) + ofs), len 
Q_CONSTINIT static const qt_meta_stringdata_DatabaseTests_t qt_meta_stringdata_DatabaseTests = {
    {
        QT_MOC_LITERAL(0, 13),  // "DatabaseTests"
        QT_MOC_LITERAL(14, 16),  // "isCreateQuestion"
        QT_MOC_LITERAL(31, 0),  // ""
        QT_MOC_LITERAL(32, 14),  // "findIdQuestion"
        QT_MOC_LITERAL(47, 12),  // "readQuestion"
        QT_MOC_LITERAL(60, 16),  // "isUpdateQuestion"
        QT_MOC_LITERAL(77, 15),  // "getAllQuestions"
        QT_MOC_LITERAL(93, 11),  // "isCreateTag"
        QT_MOC_LITERAL(105, 11),  // "isFindIdTag"
        QT_MOC_LITERAL(117, 7),  // "readTag"
        QT_MOC_LITERAL(125, 11),  // "isUpdateTag"
        QT_MOC_LITERAL(137, 10),  // "getAllTags"
        QT_MOC_LITERAL(148, 17),  // "isRelationCreated"
        QT_MOC_LITERAL(166, 23),  // "readAllRelatedQuestions"
        QT_MOC_LITERAL(190, 18),  // "readAllRelatedTags"
        QT_MOC_LITERAL(209, 17),  // "isRelationRemoved"
        QT_MOC_LITERAL(227, 32),  // "isAllRealtionWithQuestionRemoved"
        QT_MOC_LITERAL(260, 24),  // "isRelationWithTagRemoved"
        QT_MOC_LITERAL(285, 17),  // "isRemovedQuestion"
        QT_MOC_LITERAL(303, 12)   // "isRemovedTag"
    },
    "DatabaseTests",
    "isCreateQuestion",
    "",
    "findIdQuestion",
    "readQuestion",
    "isUpdateQuestion",
    "getAllQuestions",
    "isCreateTag",
    "isFindIdTag",
    "readTag",
    "isUpdateTag",
    "getAllTags",
    "isRelationCreated",
    "readAllRelatedQuestions",
    "readAllRelatedTags",
    "isRelationRemoved",
    "isAllRealtionWithQuestionRemoved",
    "isRelationWithTagRemoved",
    "isRemovedQuestion",
    "isRemovedTag"
};
#undef QT_MOC_LITERAL
} // unnamed namespace

Q_CONSTINIT static const uint qt_meta_data_DatabaseTests[] = {

 // content:
      10,       // revision
       0,       // classname
       0,    0, // classinfo
      18,   14, // methods
       0,    0, // properties
       0,    0, // enums/sets
       0,    0, // constructors
       0,       // flags
       0,       // signalCount

 // slots: name, argc, parameters, tag, flags, initial metatype offsets
       1,    0,  122,    2, 0x08,    1 /* Private */,
       3,    0,  123,    2, 0x08,    2 /* Private */,
       4,    0,  124,    2, 0x08,    3 /* Private */,
       5,    0,  125,    2, 0x08,    4 /* Private */,
       6,    0,  126,    2, 0x08,    5 /* Private */,
       7,    0,  127,    2, 0x08,    6 /* Private */,
       8,    0,  128,    2, 0x08,    7 /* Private */,
       9,    0,  129,    2, 0x08,    8 /* Private */,
      10,    0,  130,    2, 0x08,    9 /* Private */,
      11,    0,  131,    2, 0x08,   10 /* Private */,
      12,    0,  132,    2, 0x08,   11 /* Private */,
      13,    0,  133,    2, 0x08,   12 /* Private */,
      14,    0,  134,    2, 0x08,   13 /* Private */,
      15,    0,  135,    2, 0x08,   14 /* Private */,
      16,    0,  136,    2, 0x08,   15 /* Private */,
      17,    0,  137,    2, 0x08,   16 /* Private */,
      18,    0,  138,    2, 0x08,   17 /* Private */,
      19,    0,  139,    2, 0x08,   18 /* Private */,

 // slots: parameters
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,

       0        // eod
};

Q_CONSTINIT const QMetaObject DatabaseTests::staticMetaObject = { {
    QMetaObject::SuperData::link<QObject::staticMetaObject>(),
    qt_meta_stringdata_DatabaseTests.offsetsAndSizes,
    qt_meta_data_DatabaseTests,
    qt_static_metacall,
    nullptr,
    qt_incomplete_metaTypeArray<qt_meta_stringdata_DatabaseTests_t,
        // Q_OBJECT / Q_GADGET
        QtPrivate::TypeAndForceComplete<DatabaseTests, std::true_type>,
        // method 'isCreateQuestion'
        QtPrivate::TypeAndForceComplete<void, std::false_type>,
        // method 'findIdQuestion'
        QtPrivate::TypeAndForceComplete<void, std::false_type>,
        // method 'readQuestion'
        QtPrivate::TypeAndForceComplete<void, std::false_type>,
        // method 'isUpdateQuestion'
        QtPrivate::TypeAndForceComplete<void, std::false_type>,
        // method 'getAllQuestions'
        QtPrivate::TypeAndForceComplete<void, std::false_type>,
        // method 'isCreateTag'
        QtPrivate::TypeAndForceComplete<void, std::false_type>,
        // method 'isFindIdTag'
        QtPrivate::TypeAndForceComplete<void, std::false_type>,
        // method 'readTag'
        QtPrivate::TypeAndForceComplete<void, std::false_type>,
        // method 'isUpdateTag'
        QtPrivate::TypeAndForceComplete<void, std::false_type>,
        // method 'getAllTags'
        QtPrivate::TypeAndForceComplete<void, std::false_type>,
        // method 'isRelationCreated'
        QtPrivate::TypeAndForceComplete<void, std::false_type>,
        // method 'readAllRelatedQuestions'
        QtPrivate::TypeAndForceComplete<void, std::false_type>,
        // method 'readAllRelatedTags'
        QtPrivate::TypeAndForceComplete<void, std::false_type>,
        // method 'isRelationRemoved'
        QtPrivate::TypeAndForceComplete<void, std::false_type>,
        // method 'isAllRealtionWithQuestionRemoved'
        QtPrivate::TypeAndForceComplete<void, std::false_type>,
        // method 'isRelationWithTagRemoved'
        QtPrivate::TypeAndForceComplete<void, std::false_type>,
        // method 'isRemovedQuestion'
        QtPrivate::TypeAndForceComplete<void, std::false_type>,
        // method 'isRemovedTag'
        QtPrivate::TypeAndForceComplete<void, std::false_type>
    >,
    nullptr
} };

void DatabaseTests::qt_static_metacall(QObject *_o, QMetaObject::Call _c, int _id, void **_a)
{
    if (_c == QMetaObject::InvokeMetaMethod) {
        auto *_t = static_cast<DatabaseTests *>(_o);
        (void)_t;
        switch (_id) {
        case 0: _t->isCreateQuestion(); break;
        case 1: _t->findIdQuestion(); break;
        case 2: _t->readQuestion(); break;
        case 3: _t->isUpdateQuestion(); break;
        case 4: _t->getAllQuestions(); break;
        case 5: _t->isCreateTag(); break;
        case 6: _t->isFindIdTag(); break;
        case 7: _t->readTag(); break;
        case 8: _t->isUpdateTag(); break;
        case 9: _t->getAllTags(); break;
        case 10: _t->isRelationCreated(); break;
        case 11: _t->readAllRelatedQuestions(); break;
        case 12: _t->readAllRelatedTags(); break;
        case 13: _t->isRelationRemoved(); break;
        case 14: _t->isAllRealtionWithQuestionRemoved(); break;
        case 15: _t->isRelationWithTagRemoved(); break;
        case 16: _t->isRemovedQuestion(); break;
        case 17: _t->isRemovedTag(); break;
        default: ;
        }
    }
    (void)_a;
}

const QMetaObject *DatabaseTests::metaObject() const
{
    return QObject::d_ptr->metaObject ? QObject::d_ptr->dynamicMetaObject() : &staticMetaObject;
}

void *DatabaseTests::qt_metacast(const char *_clname)
{
    if (!_clname) return nullptr;
    if (!strcmp(_clname, qt_meta_stringdata_DatabaseTests.stringdata0))
        return static_cast<void*>(this);
    return QObject::qt_metacast(_clname);
}

int DatabaseTests::qt_metacall(QMetaObject::Call _c, int _id, void **_a)
{
    _id = QObject::qt_metacall(_c, _id, _a);
    if (_id < 0)
        return _id;
    if (_c == QMetaObject::InvokeMetaMethod) {
        if (_id < 18)
            qt_static_metacall(this, _c, _id, _a);
        _id -= 18;
    } else if (_c == QMetaObject::RegisterMethodArgumentMetaType) {
        if (_id < 18)
            *reinterpret_cast<QMetaType *>(_a[0]) = QMetaType();
        _id -= 18;
    }
    return _id;
}
QT_WARNING_POP
QT_END_MOC_NAMESPACE
